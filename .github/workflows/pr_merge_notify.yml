name: PR Merge Notify
on:
  pull_request:
    types: [closed]

permissions:
  contents: read
  issues: write

jobs:
  notify-qc:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, '(qc)') && github.event.action == 'closed'
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    steps:
      - name: Wait 10 sec
        run: sleep 10
        
      - name: Notify QC for Acceptance
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            const targetRepo = {
              owner: 'www0527',
              repo: 'Redux-learning'
            };
            const qcUsers = ['www0527', 'user2', 'user3'];
            
            try {
              const prBody = context.payload.pull_request.body;
              const issueMatch = prBody.match(/#(\d+)/);
              
              if (!issueMatch) {
                throw new Error('未在 PR 描述中找到關聯的 issue');
              }
              
              const issueNumber = issueMatch[1];
              const originalIssue = await github.rest.issues.get({
                owner,
                repo,
                issue_number: parseInt(issueNumber)
              });

              const searchResult = await github.rest.search.issuesAndPullRequests({
                q: `repo:${targetRepo.owner}/${targetRepo.repo} is:issue is:open in:title "${originalIssue.data.title.trim()}"`,
                per_page: 1
              });

              if (searchResult.data.total_count === 0) {
                throw new Error(`未找到標題為 "${originalIssue.data.title}" 的 issue`);
              }

              const targetIssue = searchResult.data.items[0];
              
              const originalIssueUrl = `https://github.com/${owner}/${repo}/issues/${issueNumber}`;
              const mentions = qcUsers.map(user => `@${user}`).join(' ');
              
              await github.rest.issues.createComment({
                owner: targetRepo.owner,
                repo: targetRepo.repo,
                issue_number: targetIssue.number,
                body: `${mentions}\n\n[QC PR #${pull_number}](${context.payload.pull_request.html_url}) 已合併到 qc 分支，請進行驗收工作指派\n\n原始 issue: ${originalIssueUrl}`
              });
            } catch (error) {
              console.error('工作流執行錯誤:', error.message);
              throw error;
            }