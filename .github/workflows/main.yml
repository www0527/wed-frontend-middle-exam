name: Sync Issues

on:
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned]
  issue_comment:
    types: [created, edited, deleted]

jobs:
  sync-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Sync issue
        uses: actions/github-script@v7
        with:
          : ${{ secrets.SYNC_TOKEN }}
          script: |
            const sourceIssue = context.payload.issue;

            // Define target repo configurations
            const targetRepos = [
              {
                owner: 'www0527',
                repo: 'Redux-learning',
                syncActions: ['opened', 'edited', 'closed', 'reopened', 'comment', 'assigned', 'unassigned'],
                excludedLabels: ['Code Review', 'Acceptance'],
                prependTitle: false // 不需要在標題前加前綴
              }
            ];

            const bodyTemplate = (htmlUrl, sourceBody, repoName, assignee) => `
            Original Issue: ${htmlUrl}
            Developer: ${assignee ? `@${assignee}` : ''}

            ---

            ${sourceBody || ''}

            ---

            *Synced from ${context.repo.owner}/${context.repo.repo} to ${repoName}*`;

            try {
              for (const { owner, repo, syncActions, excludedLabels = [], prependTitle } of targetRepos) {
                const repoName = `${owner}/${repo}`;

                // 檢查動作是否允許
                if (!syncActions.includes(context.payload.action)) {
                  console.log(`Action "${context.payload.action}" not allowed for ${repoName}`);
                  continue;
                }

                // 檢查是否有排除的標籤
                const hasExcludedLabel = excludedLabels.length > 0 &&
                  sourceIssue.labels.some(label => excludedLabels.includes(label.name));
                if (hasExcludedLabel) {
                  console.log(`Skipping sync for issue with excluded label in ${repoName}`);
                  continue;
                }

                // 獲取當前指派的開發者資訊
                const assignee = sourceIssue.assignees.length > 0
                  ? sourceIssue.assignees.map(user => user.login).join(', ')
                  : null;

                // 構建標題（加上前綴）
                const title = prependTitle
                  ? `${prependTitle} ${sourceIssue.title}` // 在標題前加前綴
                  : sourceIssue.title;

                // 動作為新增 Issue 時
                if (context.payload.action === 'opened') {
                  await github.rest.issues.create({
                    owner,
                    repo,
                    title: title,
                    body: bodyTemplate(sourceIssue.html_url, sourceIssue.body, repoName, assignee),
                    labels: sourceIssue.labels.map(label => label.name)
                  });
                  console.log(`Successfully created sync issue in ${repoName}`);
                }

                // 動作為編輯或指派變更時
                if (context.payload.action === 'edited' || context.payload.action === 'assigned' || context.payload.action === 'unassigned') {
                  const searchQuery = `repo:${owner}/${repo} "Original Issue: ${sourceIssue.html_url}"`;
                  const searchResult = await github.rest.search.issuesAndPullRequests({
                    q: searchQuery
                  });

                  if (searchResult.data.items.length > 0) {
                    const targetIssue = searchResult.data.items[0];
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number: targetIssue.number,
                      title: title, // 更新後標題仍保持前綴
                      body: bodyTemplate(sourceIssue.html_url, sourceIssue.body, repoName, assignee)
                    });
                    console.log(`Successfully updated sync issue in ${repoName}`);
                  }
                }
              }
            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
            }