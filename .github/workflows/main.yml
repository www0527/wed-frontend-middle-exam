name: Sync Issues

on:
  issues:
    types: [opened, edited, closed, reopened, assigned, unassigned]
  issue_comment:
    types: [created, edited, deleted]

permissions:
  contents: read
  issues: write

jobs:
  sync-issues:
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug Token
        run: |
          if [ -n "${{ secrets.SYNC_TOKEN }}" ]; then
            echo "SYNC_TOKEN is set"
          else
            echo "SYNC_TOKEN is not set"
          fi

      - name: Verify Access
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_TOKEN }}
          script: |
            try {
              await github.rest.repos.get({
                owner: context.repo.owner,
                repo: 'Redux-learning'
              });
              console.log('Successfully accessed target repository');
            } catch (error) {
              console.error('Repository access test failed:', error);
              throw error;
            }

      - name: Sync issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_TOKEN }}
          script: |
            try {
              const sourceIssue = context.payload.issue;
              
              // 構建 issue 內容
              const title = sourceIssue.title;
              const body = `
                Original Issue: ${sourceIssue.html_url}
                Developer: ${sourceIssue.assignee ? `@${sourceIssue.assignee.login}` : ''}

                ---

                ${sourceIssue.body || ''}

                ---

                *Synced from ${context.repo.owner}/${context.repo.repo} to ${context.repo.owner}/Redux-learning*
              `;

              // 根據不同的動作執行不同的操作
              if (context.payload.action === 'opened') {
                // 新建 issue 時直接創建
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: 'Redux-learning',
                  title: title,
                  body: body,
                  labels: sourceIssue.labels.map(label => label.name)
                });
                console.log('Created new issue');
              } 
              else if (['edited', 'assigned', 'unassigned', 'closed', 'reopened'].includes(context.payload.action)) {
                // 更新 issue 時先查找對應的 issue
                const searchQuery = `is:issue repo:${context.repo.owner}/Redux-learning "Original Issue: ${sourceIssue.html_url}"`;
                const searchResult = await github.rest.search.issuesAndPullRequests({
                  q: searchQuery
                });

                if (searchResult.data.items.length > 0) {
                  const targetIssue = searchResult.data.items[0];
                  
                  // 如果是關閉或重新打開的動作，同步狀態
                  if (context.payload.action === 'closed') {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: 'Redux-learning',
                      issue_number: targetIssue.number,
                      state: 'closed'
                    });
                  } else if (context.payload.action === 'reopened') {
                    await github.rest.issues.update({
                      owner: context.repo.owner,
                      repo: 'Redux-learning',
                      issue_number: targetIssue.number,
                      state: 'open'
                    });
                  }
                  
                  // 更新內容和標題
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: 'Redux-learning',
                    issue_number: targetIssue.number,
                    title: title,
                    body: body
                  });
                  console.log('Successfully updated existing issue');
                } 
              }
              
              // 如果是評論相關的動作
              if (context.payload.comment) {
                const searchQuery = `is:issue repo:${context.repo.owner}/Redux-learning "Original Issue: ${sourceIssue.html_url}"`;
                const searchResult = await github.rest.search.issuesAndPullRequests({
                  q: searchQuery
                });

                if (searchResult.data.items.length > 0) {
                  const targetIssue = searchResult.data.items[0];
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: 'Redux-learning',
                    issue_number: targetIssue.number,
                    body: `${context.payload.comment.body}\n\n*Synced comment from original issue*`
                  });
                  console.log('Successfully synced comment');
                }
              }
              
            } catch (error) {
              console.error('Error details:', {
                message: error.message,
                status: error.status,
                response: error.response
              });
              throw error;
            }
